import sensor, image, time, lcd
from maix import KPU
import gc

from maix import GPIO
from fpioa_manager import fm
from board import board_info

fm.register(board_info.BOOT_KEY, fm.fpioa.GPIOHS0)
key_gpio = GPIO(GPIO.GPIOHS0, GPIO.IN)

lcd.init()
sensor.reset()                      # Reset and initialize the sensor. It will
                                    # run automatically, call sensor.run(0) to stop
sensor.set_pixformat(sensor.RGB565) # Set pixel format to RGB565 (or GRAYSCALE)
sensor.set_framesize(sensor.QVGA)   # Set frame size to QVGA (320x240)
sensor.set_windowing((224, 224))
#sensor.set_vflip(1)
sensor.skip_frames(time = 500)     # Wait for settings take effect.
clock = time.clock()                # Create a clock object to track the FPS.

kpu = KPU()
print("ready load model")
kpu.load("/sd/KPU/self_learn_classifier/mb-0.25.kmodel")

start_processing = False
BOUNCE_PROTECTION = 50

def set_key_state(*_):
    global start_processing
    start_processing = True
    time.sleep_ms(BOUNCE_PROTECTION)

key_gpio.irq(set_key_state, GPIO.IRQ_RISING, GPIO.WAKEUP_NOT_SUPPORT)

record_ftrs = []
THRESHOLD = 98.5

i = 0
while True:
    i += 1
    gc.collect()
    print("cnt :", i)
    #print("mem free:",gc.mem_free())
    clock.tick()                    # Update the FPS clock.
    img = sensor.snapshot()
    feature = kpu.run_with_output(img, get_feature = True)
    fps = clock.fps()
    scores = []
    for j in range(len(record_ftrs)):
        score = kpu.feature_compare(record_ftrs[j], feature)
        scores.append(score)
    if len(scores):
        max_score = max(scores)
        index = scores.index(max_score)
        if max_score > THRESHOLD:
            a = img.draw_string(0, 200, "class:%d,scor:%2.1f" %(index, max_score), color=(255, 0, 0), scale=2)

    a = img.draw_string(0, 0, "%2.1ffps" %(fps), color=(0, 60, 128), scale=1.0)
    lcd.display(img)

    if start_processing:
        record_ftrs.append(feature)
        start_processing = False


kpu.deinit()
